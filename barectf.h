#ifndef _BARECTF_H
#define _BARECTF_H

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2016 Philippe Proulx <pproulx@efficios.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *
 * The following C code was generated by barectf 2.2.1
 * on 2017-03-07T20:54:33.351013.
 *
 * For more details, see <http://barectf.org>.
 */

#include <stdint.h>

#include "barectf-bitfield.h"

#ifdef __cplusplus
extern "C" {
#endif

#define _BARECTF_PREFIX barectf_
#define _BARECTF_DEFAULT_STREAM default

#define barectf_trace_simple_uint32 barectf_default_trace_simple_uint32
#define barectf_trace_simple_int16 barectf_default_trace_simple_int16
#define barectf_trace_simple_float barectf_default_trace_simple_float
#define barectf_trace_trace_sensor barectf_default_trace_trace_sensor
#define barectf_trace_simple_enum barectf_default_trace_simple_enum
#define barectf_trace_context_no_payload barectf_default_trace_context_no_payload
#define barectf_trace_no_context_no_payload barectf_default_trace_no_context_no_payload
#define barectf_trace_sensor_readings barectf_default_trace_sensor_readings
#define barectf_trace_bit_packed_integers barectf_default_trace_bit_packed_integers

struct barectf_ctx;

uint32_t barectf_packet_size(void *ctx);
int barectf_packet_is_full(void *ctx);
int barectf_packet_is_empty(void *ctx);
uint32_t barectf_packet_events_discarded(void *ctx);
uint8_t *barectf_packet_buf(void *ctx);
void barectf_packet_set_buf(void *ctx, uint8_t *buf, uint32_t buf_size);
uint32_t barectf_packet_buf_size(void *ctx);
int barectf_packet_is_open(void *ctx);

/* barectf platform callbacks */
struct barectf_platform_callbacks {
	/* clock callbacks */
	uint64_t (*default_clock_get_value)(void *);

	/* is back-end full? */
	int (*is_backend_full)(void *);

	/* open packet */
	void (*open_packet)(void *);

	/* close packet */
	void (*close_packet)(void *);
};

/* common barectf context */
struct barectf_ctx {
	/* platform callbacks */
	struct barectf_platform_callbacks cbs;

	/* platform data (passed to callbacks) */
	void *data;

	/* output buffer (will contain a CTF binary packet) */
	uint8_t *buf;

	/* packet size in bits */
	uint32_t packet_size;

	/* content size in bits */
	uint32_t content_size;

	/* current position from beginning of packet in bits */
	uint32_t at;

	/* packet header + context size (content offset) */
	uint32_t off_content;

	/* events discarded */
	uint32_t events_discarded;

	/* current packet is opened */
	int packet_is_open;
};

/* context for stream "default" */
struct barectf_default_ctx {
	/* parent */
	struct barectf_ctx parent;

	/* config-specific members follow */
	uint32_t off_tph_magic;
	uint32_t off_tph_uuid;
	uint32_t off_tph_stream_id;
	uint32_t off_spc_timestamp_begin;
	uint32_t off_spc_timestamp_end;
	uint32_t off_spc_packet_size;
	uint32_t off_spc_content_size;
	uint32_t off_spc_events_discarded;
};

/* initialize context */
void barectf_init(
	void *vctx,
	uint8_t *buf,
	uint32_t buf_size,
	struct barectf_platform_callbacks cbs,
	void *data
);

/* open packet for stream "default" */
void barectf_default_open_packet(
	struct barectf_default_ctx *ctx
);

/* close packet for stream "default" */
void barectf_default_close_packet(struct barectf_default_ctx *ctx);

/* trace (stream "default", event "simple_uint32") */
void barectf_default_trace_simple_uint32(
	struct barectf_default_ctx *ctx,
	uint32_t ep_value
);

/* trace (stream "default", event "simple_int16") */
void barectf_default_trace_simple_int16(
	struct barectf_default_ctx *ctx,
	int16_t ep_value
);

/* trace (stream "default", event "simple_float") */
void barectf_default_trace_simple_float(
	struct barectf_default_ctx *ctx,
	float ep_value
);

/* trace (stream "default", event "trace_sensor") */
void barectf_default_trace_trace_sensor(
	struct barectf_default_ctx *ctx,
	const char * ep_value
);

/* trace (stream "default", event "simple_enum") */
void barectf_default_trace_simple_enum(
	struct barectf_default_ctx *ctx,
	uint8_t ep_value
);

/* trace (stream "default", event "context_no_payload") */
void barectf_default_trace_context_no_payload(
	struct barectf_default_ctx *ctx,
	uint32_t ec_a,
	const char * ec_b
);

/* trace (stream "default", event "no_context_no_payload") */
void barectf_default_trace_no_context_no_payload(
	struct barectf_default_ctx *ctx
);

/* trace (stream "default", event "sensor_readings") */
void barectf_default_trace_sensor_readings(
	struct barectf_default_ctx *ctx,
	int32_t ep_temperature,
	uint16_t ep_humidity,
	const char * ep_device_info,
	const char * ep_sensor_info
);

/* trace (stream "default", event "bit_packed_integers") */
void barectf_default_trace_bit_packed_integers(
	struct barectf_default_ctx *ctx,
	uint8_t ep_uint1,
	int8_t ep_int1,
	uint8_t ep_uint2,
	int8_t ep_int3,
	uint8_t ep_uint4,
	int8_t ep_int5,
	uint8_t ep_uint6,
	int8_t ep_int7,
	uint8_t ep_uint8
);

#ifdef __cplusplus
}
#endif

#endif /* _BARECTF_H */
