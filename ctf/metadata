/* CTF 1.8 */

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2016 Philippe Proulx <pproulx@efficios.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
 *
 * The following TSDL code was generated by barectf v2.2.1
 * on 2017-01-12 10:49:13.998577.
 *
 * For more details, see <http://barectf.org>.
 */

trace {
	major = 1;
	minor = 8;
	byte_order = le;
	uuid = "aab45aa6-d8de-11e6-aa79-b827eb3c4afa";
	packet.header := struct {
		integer {
			size = 32;
			align = 32;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} magic;
		integer {
			size = 8;
			align = 8;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} uuid[16];
		integer {
			size = 8;
			align = 8;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} stream_id;
	} align(1);
};

env {
	tracer_patch = 1;
	barectf_gen_date = "2017-01-12T10:49:13.997581";
	tracer_major = 2;
	domain = "bare";
	tracer_name = "barectf";
	tracer_minor = 2;
};

clock {
	name = default;
	freq = 1000000000;
	offset_s = 1434072888;
	offset = 0;
	precision = 0;
	absolute = false;
};

/* default */
stream {
	id = 0;
	packet.context := struct {
		integer {
			size = 64;
			align = 64;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
			map = clock.default.value;
		} timestamp_begin;
		integer {
			size = 64;
			align = 64;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
			map = clock.default.value;
		} timestamp_end;
		integer {
			size = 32;
			align = 32;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} packet_size;
		integer {
			size = 32;
			align = 32;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} content_size;
		integer {
			size = 32;
			align = 32;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} events_discarded;
	} align(1);
	event.header := struct {
		integer {
			size = 64;
			align = 64;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
			map = clock.default.value;
		} timestamp;
		integer {
			size = 16;
			align = 16;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} id;
	} align(1);
};

event {
	name = "simple_uint32";
	id = 0;
	stream_id = 0; /* default */
	loglevel = 2; /* CRIT */
	fields := struct {
		integer {
			size = 32;
			align = 32;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} value;
	} align(1);
};

event {
	name = "simple_int16";
	id = 1;
	stream_id = 0; /* default */
	fields := struct {
		integer {
			size = 16;
			align = 16;
			signed = true;
			byte_order = le;
			base = 10;
			encoding = none;
		} value;
	} align(1);
};

event {
	name = "simple_float";
	id = 2;
	stream_id = 0; /* default */
	fields := struct {
		floating_point {
			exp_dig = 8;
			mant_dig = 24;
			align = 32;
			byte_order = le;
		} value;
	} align(1);
};

event {
	name = "trace_sensor";
	id = 3;
	stream_id = 0; /* default */
	loglevel = 4; /* WARNING */
	fields := struct {
		string {
			encoding = UTF8;
		} value;
	} align(1);
};

event {
	name = "simple_enum";
	id = 4;
	stream_id = 0; /* default */
	fields := struct {
		enum : integer {
			size = 8;
			align = 8;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} {
			"NEW" = 0,
			"TERMINATED" = 1,
			"READY" = 2,
			"RUNNING" = 3,
			"WAITING" = 4,
		} value;
	} align(1);
};

event {
	name = "context_no_payload";
	id = 5;
	stream_id = 0; /* default */
	context := struct {
		integer {
			size = 32;
			align = 32;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} a;
		string {
			encoding = UTF8;
		} b;
	} align(1);
	fields := struct {} align(8);
};

event {
	name = "no_context_no_payload";
	id = 6;
	stream_id = 0; /* default */
	fields := struct {} align(8);
};

event {
	name = "sensor_readings";
	id = 7;
	stream_id = 0; /* default */
	fields := struct {
		integer {
			size = 32;
			align = 32;
			signed = true;
			byte_order = le;
			base = 10;
			encoding = none;
		} temperature;
		integer {
			size = 16;
			align = 16;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} humidity;
		string {
			encoding = UTF8;
		} other_readings;
		enum : integer {
			size = 8;
			align = 8;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} {
			"NEW" = 0,
			"TERMINATED" = 1,
			"READY" = 2,
			"RUNNING" = 3,
			"WAITING" = 4,
		} state;
	} align(1);
};

event {
	name = "bit_packed_integers";
	id = 8;
	stream_id = 0; /* default */
	loglevel = 513;
	fields := struct {
		integer {
			size = 1;
			align = 1;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} uint1;
		integer {
			size = 1;
			align = 1;
			signed = true;
			byte_order = le;
			base = 10;
			encoding = none;
		} int1;
		integer {
			size = 2;
			align = 1;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} uint2;
		integer {
			size = 3;
			align = 1;
			signed = true;
			byte_order = le;
			base = 10;
			encoding = none;
		} int3;
		integer {
			size = 4;
			align = 1;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} uint4;
		integer {
			size = 5;
			align = 1;
			signed = true;
			byte_order = le;
			base = 10;
			encoding = none;
		} int5;
		integer {
			size = 6;
			align = 1;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} uint6;
		integer {
			size = 7;
			align = 1;
			signed = true;
			byte_order = le;
			base = 10;
			encoding = none;
		} int7;
		integer {
			size = 8;
			align = 1;
			signed = false;
			byte_order = le;
			base = 10;
			encoding = none;
		} uint8;
	} align(8);
};
